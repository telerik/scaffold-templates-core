@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@{
    bool debugMode = false;
    if (debugMode) {
@: -- Debug Mode Enabled --
@: Model.ViewName: @Model.ViewName
@: Model.ViewDataTypeShortName: @Model.ViewDataTypeShortName
@: Model.ViewDataTypeName: @Model.ViewDataTypeName
@: Model.ModelMetadata.EntitySetName: @Model.ModelMetadata.EntitySetName
@: ControllerName: @ControllerName()
@: Model.IsPartialView: @Model.IsPartialView
@: Model.IsPartialView: @Model.IsPartialView
@: Model.IsPartialView: @Model.IsPartialView
@: Model.IsPartialView: @Model.IsPartialView
foreach (var property in Model.GetType().GetProperties())
        {
    @: @property
        }
    }

    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
@:     ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
@:     Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<h1>@Model.ViewName</h1>
@:
    }
    else
    {
@:@@{
@:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
@:<meta name="viewport" content="width=device-width" />
@:<title>@Model.ViewName</title>
@:</head>
@:<body>
    //    PushIndent("    ");
    }
@: <kendo-grid name="@(ControllerName())Grid" height="550" on-change="handleChange" selectable="true">
    @:<columns>
    // Template for columns
        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
    @: <column field="@GetValueExpression(property)" title="@GetValueExpression(property)" />
            }
            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
    @: <column field="@GetValueExpression(navigation)" title="@GetValueExpression(navigation).@navigation.DisplayPropertyName)" />
            }
        }
    @:</columns>
    @:<toolbar>
    @:    <toolbar-button name="excel"/>
    @:    <toolbar-button name="pdf"/>
    @:    <toolbar-button name="create" template="tbCreate"/>
    @:    <toolbar-button name="edit" template="tbEdit"/>
    @:    <toolbar-button name="details" template="tbDetails"/>
    @:    <toolbar-button name="delete" template="tbDelete"/>
    @:</toolbar>
    @:<excel all-pages="true" />
    @:<groupable enabled="true" />
    @:<sortable enabled="true" />
    @:<pageable button-count="5" refresh="true" />
    @:<filterable enabled="true" />
    @:<datasource type="DataSourceTagHelperType.Ajax" page-size="20">
    @:    <schema>
    @:        <model>
    @:            <fields>
                    // Template for fields
                    foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                    {
                        if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                            && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                        {
                 @: <field name="@GetValueExpression(property)" type="@GetFieldDataType(property)" />
                        }
                        else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                        {
                 @: <field name="@GetValueExpression(navigation)" title="@GetFieldDataType(property)" />
                        }
                    }
    @:            </fields>
    @:        </model>
    @:    </schema>
    @:    <transport>
    @:        <read url="@@Url.Action("@(ControllerName())_Read")" />
    @:    </transport>
    @:</datasource>
@: </kendo-grid>
    if (Model.IsPartialView)
    {
        @: <!-- Move this script to the Scripts section of the page -->
    }
@: <script>
@:     function tbCreate(data) {
@:         return `<a id='tbCreate' href='${location.pathname}/create' class='k-button'>Create</a>`;
@:     };
@:     function tbDetails(data) {
@:         return `<a id='tbDetails'>Details</a>`;
@:     };
@:     function tbEdit(data) {
@:         return `<a id='tbEdit'>Edit</a>`;
@:     };
@:     function tbDelete(data) {
@:         return `<a id='tbDelete'>Delete</a>`;
@:     };
@:     function handleChange(args) {
@:         let enabled = this.select().length != 0;
@:         toolBar.edit.enable(enabled);
@:         toolBar.details.enable(enabled);
@:         toolBar.del.enable(enabled);
@:         if (enabled) {
@:              let selectedId = this.dataItem(this.select()).@(GetPrimaryKeyName());
@:              toolBar.edit.wrapper.attr("href", `${location.pathname}/edit/${selectedId}`);
@:              toolBar.details.wrapper.attr("href", `${location.pathname}/details/${selectedId}`);
@:              toolBar.del.wrapper.attr("href", `${location.pathname}/delete/${selectedId}`);
@:          } else {
@:              toolBar.edit.wrapper.attr("href", "#");
@:              toolBar.details.wrapper.attr("href", "#");
@:              toolBar.details.wrapper.attr("href", "#");
@:          }
@:     };
@:    let toolBar;
@:         $(function () {
@:             // references to UI elements
@:             toolBar = {
@:                  create: $("#tbCreate").kendoButton().data("kendoButton"),
@:                  edit: $("#tbEdit").kendoButton({ enable: false }).data("kendoButton"),
@:                  details: $("#tbDetails").kendoButton({ enable: false }).data("kendoButton"),
@:                  del: $("#tbDelete").kendoButton({ enable: false }).data("kendoButton")
@:             };
@:        });
@: </script>
if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
        @:</body>
        @:</html>
    }
}
@*Code for template*@
@functions
{
    string GetPrimaryKeyName() =>
        (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;

    string GetValueExpression(IPropertyMetadata property) => property.PropertyName;

    string GetValueExpression(INavigationMetadata navigation) => navigation.AssociationPropertyName;

    string GetEnumerableTypeExpression(string typeName) => "IEnumerable<" + typeName + ">";

    bool IsNumericType(IPropertyMetadata property)
        {
            var types = new [] {
                "System.Byte",
                "System.SByte",
                "System.UInt16",
                "System.UInt32",
                "System.UInt64",
                "System.Int16",
                "System.Int32",
                "System.Int64",
                "System.Decimal",
                "System.Double",
                "System.Single"
            };

            return types.Any(property.TypeName.Contains);
        }

    bool IsCheckbox(IPropertyMetadata p) => p.TypeName.Contains("System.Boolean");
    bool IsSelect(IPropertyMetadata p) => p.IsEnum && !p.IsEnumFlags;
    bool IsDate(IPropertyMetadata p) => p.TypeName.Contains("System.DateTime");

    string GetFieldDataType(IPropertyMetadata property) =>
        IsNumericType(property) ? "number" :
        IsDate(property) ? "date" :
        "string";

    //Best guess for controller name
    string ControllerName() => Model.ModelMetadata.EntitySetName;
}
